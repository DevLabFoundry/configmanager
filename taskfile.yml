# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: '3'

env:
  OWNER: DevLabFoundry
  NAME: configmanager
  GO_TARGET_ARCH: "darwin"
  GIT_TAG: "0.0.0"
  VERSION: "v{{.GIT_TAG}}"
  REVISION: '{{.REVISION | default "aaaa1234" }}'

tasks:
  test_prereq:
    internal: true
    preconditions:
      - go version
    cmd: |
      mkdir -p .coverage
      go install github.com/jstemmer/go-junit-report/v2@latest
      go install github.com/axw/gocov/gocov@latest
      go install github.com/AlekSi/gocov-xml@latest

  clean_go:
    internal: true
    cmds:
      - rm -rf dist/*
      - rm -rf .coverage
      - mkdir -p dist

  test:
    desc: Install dependencies
    internal: false
    deps:
      - test_prereq
    cmds:
      - |
        set -exo pipefail
        go test ./... -v -buildvcs=false -mod=readonly -race -coverpkg=./... -coverprofile=.coverage/out | tee .coverage/unit

  install:
    desc: Install dependencies
    internal: true
    cmd: |
      go mod tidy

  lint:
    desc: Runs lint and vet
    cmd: |
      go vet

  coverage:
    desc: generate coverage
    deps:
      - test
    cmds:
      - go-junit-report -in .coverage/unit > .coverage/report-junit.xml
      - gocov convert .coverage/out | gocov-xml > .coverage/report-cobertura.xml

  show_coverage:
    desc: Opens the current coverage viewer for the the configmanager utility.
    deps:
      - coverage
    cmd: go tool cover -html=.coverage/out

  show_docs:
    desc: Opens a webview with godoc running
    summary: |
      Already filters the packages to this one and enables
      internal/private package documentation
    cmd: |
      go install golang.org/x/tools/cmd/godoc@latest
      open http://localhost:6060/pkg/github.com/DevLabFoundry/configmanager/v2/?m=all
      godoc -notes "BUG|TODO" -play -http=:6060

  bin:
    desc: Generates binaries in a dist folder
    summary: |
      Generates all the binaries for the configmanager utility.

      can be called from inside CI like this:

      `task bin GIT_TAG=0.1.2 REVISION=$commit_sha`
    deps:
      - clean_go
    cmds:
      - cmd: mkdir -p ./dist
      - for: { var: GO_ARCHS, as: GO_TARGET_ARCH }
        cmd: |
          GOOS={{.GO_TARGET_ARCH}} CGO_ENABLED=0 go build -mod=readonly -buildvcs=false {{.LDFLAGS}} -o ./dist/configmanager-{{.GO_TARGET_ARCH}} ./cmd
      - for: { var: GO_ARCHS, as: GO_TARGET_ARCH }
        cmd: |
          GOOS={{.GO_TARGET_ARCH}} GOARCH=arm64 CGO_ENABLED=0 go build -mod=readonly -buildvcs=false {{.LDFLAGS}} -o ./dist/configmanager-{{.GO_TARGET_ARCH}}-arm64 ./cmd
      - for: { var: GO_ARCHS, as: GO_TARGET_ARCH }
        cmd: |
          GOOS={{.GO_TARGET_ARCH}} GOARCH=amd64 CGO_ENABLED=0 go build -mod=readonly -buildvcs=false {{.LDFLAGS}} -o ./dist/configmanager-{{.GO_TARGET_ARCH}}-amd64 ./cmd
    vars:
      LDFLAGS: -ldflags="-s -w -X \"github.com/DevLabFoundry/configmanager/v2/cmd/configmanager.Version=${VERSION}\" -X \"github.com/DevLabFoundry/configmanager/v2/cmd/configmanager.Revision={{.REVISION}}\" -extldflags -static"
      GO_ARCHS: darwin windows linux

  tag:
    desc: |
      Usage `task tag GIT_TAG=2111dsfsdfa REVISION=as2342432`
    cmd: |
      git tag -a ${VERSION} -m "ci tag release" ${REVISION}
      git push origin ${VERSION}
